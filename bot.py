import logging
import os
import json
import asyncio
from aiohttp import web
from db import init_db, get_user, create_user, update_user_state, update_user_nickname, update_user_gender, update_user_theme, update_user_subcategory
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

application = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()

ADMIN_ID = 491000185

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    filename="bot.log",
    filemode="a"
)
logger = logging.getLogger(__name__)

STATE_NICKNAME = "nickname"
STATE_GENDER = "gender"

waiting_queue = asyncio.Queue()
active_chats = {}
waiting_events = {}

topics = {
    "IT": ["–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–î–∏–∑–∞–π–Ω", "AI", "–ö–∞—Ä—å–µ—Ä–∞ –≤ IT"],
    "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è": ["–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞", "–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å", "–û—Ç–Ω–æ—à–µ–Ω–∏—è", "–ú–æ—Ç–∏–≤–∞—Ü–∏—è"],
    "–•–æ–±–±–∏": ["–ò–≥—Ä—ã", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–ö–Ω–∏–≥–∏", "–ú—É–∑—ã–∫–∞"],
    "–ë–∏–∑–Ω–µ—Å": ["–°—Ç–∞—Ä—Ç–∞–ø—ã", "–ü–æ–∏—Å–∫ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤", "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–§–∏–Ω–∞–Ω—Å—ã"],
    "–ö—É–ª—å—Ç—É—Ä–∞ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ": ["–§–∏–ª—å–º—ã", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–ñ–∏–≤–æ–ø–∏—Å—å", "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è"],
    "–ó–¥–æ—Ä–æ–≤—å–µ –∏ —Å–ø–æ—Ä—Ç": ["–§–∏—Ç–Ω–µ—Å", "–ü–∏—Ç–∞–Ω–∏–µ", "–ú–µ–¥–∏—Ç–∞—Ü–∏—è", "–ó–û–ñ"]
}
for t in topics:
    topics[t].append("–õ—é–±–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è")


def keyboard_main_menu():
    return ReplyKeyboardMarkup([["üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"], ["‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"], ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)


def keyboard_subcategories(theme):
    return ReplyKeyboardMarkup([[sub] for sub in topics[theme]] + [["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)


def keyboard_searching():
    return ReplyKeyboardMarkup([["–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–∏—Å–∫"], ["–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞"], ["‚õî –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫"], ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)


def keyboard_dialog():
    return ReplyKeyboardMarkup([["–ù–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"], ["‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"]], resize_keyboard=True)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = await get_user(user_id)

    if user:
        nickname = user.get("nickname") or "–¥—Ä—É–≥"
        await update.message.reply_text(
            f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {nickname}!",
            reply_markup=ReplyKeyboardMarkup([[k] for k in topics], resize_keyboard=True)
        )
    else:
        await create_user(user_id)
        await update_user_state(user_id, STATE_NICKNAME)
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –∏ –æ–±—â–µ–Ω–∏—è –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º.\n"
            "–ù–∞—Ö–æ–¥–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ —Ç–æ–ª—å–∫–æ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–±—è —Ç–µ–º—ã!\n"
            "–í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–∏–∫ (–∏–º—è, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ç–µ–±—è —É–≤–∏–¥–∏—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫):"
        )


async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    user = await get_user(user_id)

    if not user:
        await create_user(user_id)
        await update_user_state(user_id, STATE_NICKNAME)
        await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–∏–∫:")
        return

    state = user.get("state", "")

    logger.info(f"User {user_id} state: {state}, message: {text}")

    if state == STATE_NICKNAME:
        await update_user_nickname(user_id, text[:32])
        await update_user_state(user_id, STATE_GENDER)
        await update.message.reply_text(
            f"–°–ø–∞—Å–∏–±–æ, {text[:32]}! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:",
            reply_markup=ReplyKeyboardMarkup(
                [["–ú—É–∂—Å–∫–æ–π"], ["–ñ–µ–Ω—Å–∫–∏–π"], ["–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å"]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        return

    if state == STATE_GENDER:
        if text not in ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π", "–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å"]:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
            return

        await update_user_gender(user_id, text)
        await update_user_state(user_id, "choosing_theme")
        await update.message.reply_text(
            "‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è –æ–±—â–µ–Ω–∏—è:",
            reply_markup=ReplyKeyboardMarkup([[k] for k in topics], resize_keyboard=True)
        )
        return

    if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update_user_state(user_id, "choosing_theme")
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=ReplyKeyboardMarkup([[k] for k in topics], resize_keyboard=True))
        return

    if state == "choosing_theme" and text in topics:
        await update_user_theme(user_id, text)
        await update_user_state(user_id, "choosing_sub")
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard_subcategories(text))
        return

    if state == "choosing_sub":
        theme = user.get("theme")
        if theme is None:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É.")
            await update_user_state(user_id, "choosing_theme")
            return

        if text in topics.get(theme, []):
            await update_user_subcategory(user_id, text)
            await update_user_state(user_id, "menu")
            increment_stats(theme, text)
            await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {theme} / {text}", reply_markup=keyboard_main_menu())
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    if state == "menu":
        if text == "üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞":
            await start_searching(update, context, user_id)
        elif text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥":
            await end_dialog(update, context, user_id)
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
        return

    if state == "searching":
        if text == "‚õî –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫":
            await cancel_search(update, context, user_id)
        elif text == "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞":
            await cancel_search(update, context, user_id)
            await start_searching(update, context, user_id)
        else:
            await update.message.reply_text("–í—ã —É–∂–µ –≤ –ø–æ–∏—Å–∫–µ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.")
        return

    if state == "chatting":
        if text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥":
            await end_dialog(update, context, user_id)
        elif text == "–ù–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞":
            await start_searching(update, context, user_id)
        else:
            partner_id = active_chats.get(user_id)
            if partner_id:
                await context.bot.send_message(partner_id, text=text)
        return

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª.")


async def start_searching(update, context, user_id):
    user = await get_user(user_id)
    if not user:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if user.get("state") in ["searching", "chatting"]:
        await update.message.reply_text("–í—ã —É–∂–µ –∏—â–µ—Ç–µ –∏–ª–∏ –≤ –¥–∏–∞–ª–æ–≥–µ.")
        return

    theme = user.get("theme")
    sub = user.get("sub")

    if not theme or not sub:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
        return

    await update_user_state(user_id, "searching")
    await waiting_queue.put(user_id)

    asyncio.create_task(search_partner_background(update, context, user_id))
    await update.message.reply_text("–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...", reply_markup=keyboard_searching())


async def search_partner_background(update, context, user_id):
    waiting_events[user_id] = asyncio.Event()
    await try_match_partner(user_id, context)

    try:
        await asyncio.wait_for(waiting_events[user_id].wait(), timeout=60)
    except asyncio.TimeoutError:
        await remove_from_queue(user_id)
        user = await get_user(user_id)
        if user and user.get("state") == "searching":
            await update_user_state(user_id, "menu")
            await context.bot.send_message(user_id, "–°–µ–π—á–∞—Å –≤—Å–µ –∑–∞–Ω—è—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=keyboard_main_menu())
    finally:
        waiting_events.pop(user_id, None)


async def try_match_partner(user_id, context):
    user = await get_user(user_id)
    if not user or user.get("state") != "searching":
        return

    theme, sub = user["theme"], user["sub"]
    temp = []
    partner = None

    for _ in range(waiting_queue.qsize()):
        other = await waiting_queue.get()
        if other == user_id:
            temp.append(other)
            continue

        other_user = await get_user(other)
        if other_user and other_user.get("theme") == theme:
            sub1, sub2 = other_user.get("sub"), sub
            if "–õ—é–±–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è" in (sub1, sub2) or sub1 == sub2:
                partner = other
                break
        temp.append(other)

    for u in temp:
        await waiting_queue.put(u)

    if partner:
        await remove_from_queue(user_id)
        await remove_from_queue(partner)
        await start_chat(context.bot, user_id, partner)


async def start_chat(bot, user1, user2):
    for uid in (user1, user2):
        await update_user_state(uid, "chatting")

    active_chats[user1] = user2
    active_chats[user2] = user1

    user1_data = await get_user(user1)
    user2_data = await get_user(user2)

    theme = user1_data.get("theme")
    sub1 = user1_data.get("sub")
    sub2 = user2_data.get("sub")

    sub_display = sub2 if sub1 == "–õ—é–±–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è" else sub1 if sub2 == "–õ—é–±–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è" else sub1

    for uid in (user1, user2):
        await bot.send_message(uid, f"–í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã. –¢–µ–º–∞: {theme}\n–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {sub_display}", reply_markup=keyboard_dialog())

    for uid in (user1, user2):
        if uid in waiting_events:
            waiting_events[uid].set()


async def cancel_search(update, context, user_id):
    user = await get_user(user_id)
    if not user or user.get("state") != "searching":
        await update.message.reply_text("–í—ã –Ω–µ –≤ –ø–æ–∏—Å–∫–µ.")
        return

    await update_user_state(user_id, "menu")
    await remove_from_queue(user_id)
    if user_id in waiting_events:
        waiting_events[user_id].set()
    await update.message.reply_text("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=keyboard_main_menu())


async def end_dialog(update, context, user_id):
    user = await get_user(user_id)
    if not user or user.get("state") != "chatting":
        await update.message.reply_text("–í—ã –Ω–µ –≤ –¥–∏–∞–ª–æ–≥–µ.")
        return

    partner = active_chats.pop(user_id, None)
    await update_user_state(user_id, "menu")

    if partner:
        active_chats.pop(partner, None)
        await update_user_state(partner, "menu")
        await context.bot.send_message(partner, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥.", reply_markup=keyboard_main_menu())

    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=keyboard_main_menu())


async def remove_from_queue(user_id):
    # –û—á–∏—Å—Ç–∫–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è (–Ω–µ–ø—Ä–æ—Å—Ç–æ, –ø–æ—ç—Ç–æ–º—É —Ç—É—Ç —Ç–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è)
    temp = []
    while not waiting_queue.empty():
        uid = await waiting_queue.get()
        if uid != user_id:
            temp.append(uid)
    for uid in temp:
        await waiting_queue.put(uid)


def increment_stats(theme, subcategory):
    # –ó–∞–≥–ª—É—à–∫–∞: –∑–¥–µ—Å—å –º–æ–∂–µ—à—å —É–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏ –≤ –ë–î –∏–ª–∏ —Ñ–∞–π–ª–µ
    pass


async def health(request):
    return web.Response(text="ok")


async def handle_webhook(request):
    body = await request.text()
    update = Update.de_json(json.loads(body), application.bot)
    await application.update_queue.put(update)
    return web.Response()


def main():
    asyncio.run(init_db())
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), message_handler))

    app = web.Application()
    app.router.add_post(f"/{os.getenv('BOT_TOKEN')}", handle_webhook)
    app.router.add_get("/health", health)
    web.run_app(app, port=int(os.getenv("PORT", 8080)))


if __name__ == "__main__":
    main()
