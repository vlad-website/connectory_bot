import logging
import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
users = {}  # user_id: {'theme': str, 'sub': str, 'state': str, 'partner_id': int}
waiting_users = {}  # (theme, sub): [user_id]

# –¢–µ–º—ã –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
topics = {
    "IT": ["–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–î–∏–∑–∞–π–Ω", "AI", "–ö–∞—Ä—å–µ—Ä–∞ –≤ IT"],
    "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è": ["–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞", "–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å", "–û—Ç–Ω–æ—à–µ–Ω–∏—è", "–ú–æ—Ç–∏–≤–∞—Ü–∏—è"],
    "–•–æ–±–±–∏": ["–ò–≥—Ä—ã", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–ö–Ω–∏–≥–∏", "–ú—É–∑—ã–∫–∞"],
    "–ë–∏–∑–Ω–µ—Å": ["–°—Ç–∞—Ä—Ç–∞–ø—ã", "–ü–æ–∏—Å–∫ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤", "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–§–∏–Ω–∞–Ω—Å—ã"],
    "–ö—É–ª—å—Ç—É—Ä–∞ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ": ["–§–∏–ª—å–º—ã", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–ñ–∏–≤–æ–ø–∏—Å—å", "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è"],
    "–ó–¥–æ—Ä–æ–≤—å–µ –∏ —Å–ø–æ—Ä—Ç": ["–§–∏—Ç–Ω–µ—Å", "–ü–∏—Ç–∞–Ω–∏–µ", "–ú–µ–¥–∏—Ç–∞—Ü–∏—è", "–ó–û–ñ"],
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu_keyboard():
    return ReplyKeyboardMarkup(
        [
            ["üîÑ –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"],
            ["üì§ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"],
            ["üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"],
        ],
        resize_keyboard=True,
    )

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[key] for key in topics.keys()]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    users[update.message.from_user.id] = {"state": "choosing_theme"}
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è –æ–±—â–µ–Ω–∏—è:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text

    if user_id not in users:
        users[user_id] = {}

    user_data = users[user_id]
    state = user_data.get("state")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if text == "üîÑ –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞":
        theme = user_data.get("theme")
        sub = user_data.get("sub")
        if not theme or not sub:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–µ–º—É –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
            return
        key = (theme, sub)
        queue = waiting_users.setdefault(key, [])
        if queue and queue[0] != user_id:
            partner_id = queue.pop(0)
            users[user_id]["partner_id"] = partner_id
            users[partner_id]["partner_id"] = user_id
            users[user_id]["state"] = "chatting"
            users[partner_id]["state"] = "chatting"

            await context.bot.send_message(partner_id, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.")
            await update.message.reply_text("–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.")
        else:
            queue.append(user_id)
            users[user_id]["state"] = "searching"
            await update.message.reply_text("–ò—â—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")

        return

    elif text == "üì§ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥":
        partner_id = user_data.get("partner_id")
        if partner_id:
            await context.bot.send_message(partner_id, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥.")
            users[partner_id]["state"] = "menu"
            users[partner_id].pop("partner_id", None)
        users[user_id]["state"] = "menu"
        users[user_id].pop("partner_id", None)
        await update.message.reply_text("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=main_menu_keyboard())
        return

    elif text == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        users[user_id] = {"state": "choosing_theme"}
        keyboard = [[key] for key in topics.keys()]
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ç–µ–º—É:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
    if state == "choosing_theme" and text in topics:
        users[user_id]["theme"] = text
        users[user_id]["state"] = "choosing_sub"
        keyboard = [[sub] for sub in topics[text]]
        keyboard.append(["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        return

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
if state == "choosing_sub":
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        users[user_id]["state"] = "choosing_theme"
        keyboard = [[key] for key in topics.keys()]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=reply_markup)
        return

    # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    theme = users[user_id].get("theme")
    if theme and text in topics.get(theme, []):
        users[user_id]["sub"] = text
        users[user_id]["state"] = "menu"
        await update.message.reply_text(
            f"–û—Ç–ª–∏—á–Ω–æ! –í—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞: ¬´{theme}¬ª –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: ¬´{text}¬ª.",
            reply_markup=main_menu_keyboard()
        )
        return

    # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª.")
    return

    # –û–±–º–µ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –º–µ–∂–¥—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞–º–∏
    if state == "chatting":
        partner_id = users[user_id].get("partner_id")
        if partner_id:
            await context.bot.send_message(partner_id, update.message.text)
        else:
            await update.message.reply_text("–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    TOKEN = os.getenv("BOT_TOKEN")
    if not TOKEN:
        print("–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        exit(1)

    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    app.run_polling()
