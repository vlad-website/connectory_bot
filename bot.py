# main.py
import os
import logging
import asyncio
from enum import Enum
from aiohttp import web

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)

from db import (
    init_db, get_user, create_user, update_user_state,
    update_user_nickname, update_user_gender, update_user_topic
)

# --- Logging ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    filename="bot.log",
    filemode="a"
)
logger = logging.getLogger(__name__)

# --- Configuration ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.getenv("PORT", 8080))

application = ApplicationBuilder().token(BOT_TOKEN).build()

# --- Enums ---
class State(str, Enum):
    NICKNAME = "nickname"
    GENDER = "gender"
    THEME = "choosing_theme"
    SUB = "choosing_sub"
    MENU = "menu"
    SEARCHING = "searching"
    CHATTING = "chatting"

# --- Topics ---
topics = {
    "IT": ["–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–î–∏–∑–∞–π–Ω", "AI", "–ö–∞—Ä—å–µ—Ä–∞ –≤ IT"],
    "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è": ["–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞", "–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å", "–û—Ç–Ω–æ—à–µ–Ω–∏—è", "–ú–æ—Ç–∏–≤–∞—Ü–∏—è"],
    "–•–æ–±–±–∏": ["–ò–≥—Ä—ã", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–ö–Ω–∏–≥–∏", "–ú—É–∑—ã–∫–∞"],
    "–ë–∏–∑–Ω–µ—Å": ["–°—Ç–∞—Ä—Ç–∞–ø—ã", "–ü–æ–∏—Å–∫ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤", "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–§–∏–Ω–∞–Ω—Å—ã"],
    "–ö—É–ª—å—Ç—É—Ä–∞ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ": ["–§–∏–ª—å–º—ã", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–ñ–∏–≤–æ–ø–∏—Å—å", "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è"],
    "–ó–¥–æ—Ä–æ–≤—å–µ –∏ —Å–ø–æ—Ä—Ç": ["–§–∏—Ç–Ω–µ—Å", "–ü–∏—Ç–∞–Ω–∏–µ", "–ú–µ–¥–∏—Ç–∞—Ü–∏—è", "–ó–û–ñ"]
}
for sub in topics.values():
    sub.append("–õ—é–±–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è")

# --- In-memory ---
waiting_queue = asyncio.Queue()
active_chats = {}
waiting_events = {}
locks = {}

# --- Keyboards ---
def keyboard_main():
    return ReplyKeyboardMarkup(
        [["üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"], ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]],
        resize_keyboard=True
    )

def keyboard_subcategories(theme):
    return ReplyKeyboardMarkup([[sub] for sub in topics.get(theme, [])] + [["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)

def keyboard_searching():
    return ReplyKeyboardMarkup(
        [["–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–∏—Å–∫"], ["–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞"], ["‚õî –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫"], ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]],
        resize_keyboard=True
    )

def keyboard_chat():
    return ReplyKeyboardMarkup(
        [["–ù–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"], ["‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"]],
        resize_keyboard=True
    )

# --- Utils ---
def get_lock(uid):
    if uid not in locks:
        locks[uid] = asyncio.Lock()
    return locks[uid]

# --- Core Handlers ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = await get_user(user_id)

    if user:
        nickname = user["nickname"] or "–¥—Ä—É–≥"
        await update.message.reply_text(f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {nickname}!", reply_markup=keyboard_main())
    else:
        await create_user(user_id)
        await update_user_state(user_id, State.NICKNAME)
        await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–∏–∫ (–¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤):")

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    user = await get_user(user_id)

    if not user:
        await create_user(user_id)
        await update_user_state(user_id, State.NICKNAME)
        await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–∏–∫:")
        return

    state = user["state"]
    logger.info(f"User {user_id} state: {state}, message: {text}")

    try:
        if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await update_user_state(user_id, State.THEME)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=ReplyKeyboardMarkup([[k] for k in topics], resize_keyboard=True))
            return

        if state == State.NICKNAME:
            await update_user_nickname(user_id, text[:32])
            await update_user_state(user_id, State.GENDER)
            await update.message.reply_text(
                f"–°–ø–∞—Å–∏–±–æ, {text[:32]}! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:",
                reply_markup=ReplyKeyboardMarkup([
                    ["–ú—É–∂—Å–∫–æ–π"], ["–ñ–µ–Ω—Å–∫–∏–π"], ["–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å"]
                ], resize_keyboard=True)
            )
            return

        if state == State.GENDER:
            if text not in ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π", "–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å"]:
                await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∏–∑ —Å–ø–∏—Å–∫–∞.")
                return
            await update_user_gender(user_id, text)
            await update_user_state(user_id, State.THEME)
            await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=ReplyKeyboardMarkup([[k] for k in topics], resize_keyboard=True))
            return

        if state == State.THEME and text in topics:
            await update_user_topic(user_id, theme=text)
            await update_user_state(user_id, State.SUB)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard_subcategories(text))
            return

        if state == State.SUB:
            user_theme = user["theme"]
            if text in topics.get(user_theme, []):
                await update_user_topic(user_id, sub=text)
                await update_user_state(user_id, State.MENU)
                await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {user_theme} / {text}", reply_markup=keyboard_main())
            else:
                await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return

        if state == State.MENU:
            if text == "üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞":
                await begin_search(update, context, user_id)
            elif text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥":
                await finish_dialog(update, context, user_id)
            else:
                await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
            return

        if state == State.SEARCHING:
            if text == "‚õî –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫":
                await cancel_search(update, context, user_id)
            elif text == "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞":
                await cancel_search(update, context, user_id)
                await begin_search(update, context, user_id)
            else:
                await update.message.reply_text("–û–∂–∏–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.")
            return

        if state == State.CHATTING:
            if text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥":
                await finish_dialog(update, context, user_id)
            elif text == "–ù–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞":
                await begin_search(update, context, user_id)
            else:
                partner_id = active_chats.get(user_id)
                if partner_id:
                    await context.bot.send_message(partner_id, text=text)
            return

        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# --- Search System ---
async def begin_search(update, context, user_id):
    user = await get_user(user_id)
    if not user.get("theme") or not user.get("sub"):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
        return

    await update_user_state(user_id, State.SEARCHING)
    await waiting_queue.put(user_id)
    waiting_events[user_id] = asyncio.Event()
    asyncio.create_task(match_partner(context, user_id))
    await update.message.reply_text("üîç –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...", reply_markup=keyboard_searching())

async def match_partner(context, user_id):
    async with get_lock(user_id):
        try:
            await asyncio.sleep(1)  # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            user = await get_user(user_id)
            theme, sub = user["theme"], user["sub"]

            candidates = []
            for uid in list(waiting_queue._queue):
                if uid == user_id:
                    continue
                other = await get_user(uid)
                if other["theme"] == theme and other["sub"] == sub:
                    candidates.append(uid)

            if candidates:
                partner_id = candidates[0]
                await clear_from_queue(user_id)
                await clear_from_queue(partner_id)

                active_chats[user_id] = partner_id
                active_chats[partner_id] = user_id

                await update_user_state(user_id, State.CHATTING)
                await update_user_state(partner_id, State.CHATTING)

                await context.bot.send_message(user_id, "‚úÖ –ü–∞—Ä—Ç–Ω—ë—Ä –Ω–∞–π–¥–µ–Ω!", reply_markup=keyboard_chat())
                await context.bot.send_message(partner_id, "‚úÖ –ü–∞—Ä—Ç–Ω—ë—Ä –Ω–∞–π–¥–µ–Ω!", reply_markup=keyboard_chat())

                waiting_events[user_id].set()
                waiting_events[partner_id].set()
                return

            await asyncio.wait_for(waiting_events[user_id].wait(), timeout=60)
        except asyncio.TimeoutError:
            await clear_from_queue(user_id)
            await update_user_state(user_id, State.MENU)
            await context.bot.send_message(user_id, "–°–µ–π—á–∞—Å –≤—Å–µ –∑–∞–Ω—è—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=keyboard_main())
        finally:
            waiting_events.pop(user_id, None)

async def clear_from_queue(uid):
    temp_q = asyncio.Queue()
    while not waiting_queue.empty():
        item = await waiting_queue.get()
        if item != uid:
            await temp_q.put(item)
    while not temp_q.empty():
        await waiting_queue.put(await temp_q.get())

async def cancel_search(update, context, user_id):
    await clear_from_queue(user_id)
    await update_user_state(user_id, State.MENU)
    await update.message.reply_text("‚õî –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=keyboard_main())

async def finish_dialog(update, context, user_id):
    partner_id = active_chats.pop(user_id, None)
    if partner_id:
        active_chats.pop(partner_id, None)
        await update_user_state(partner_id, State.MENU)
        await context.bot.send_message(partner_id, "‚ùå –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º.", reply_markup=keyboard_main())
    await update_user_state(user_id, State.MENU)
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=keyboard_main())

# --- Webhook ---
async def handle_webhook(request):
    try:
        data = await request.json()
        update = Update.de_json(data, application.bot)
        await application.process_update(update)
        return web.Response(text="ok")
    except Exception as e:
        logger.error(f"Webhook error: {e}", exc_info=True)
        return web.Response(status=500, text="error")

# --- Startup ---
async def on_startup(app):
    await init_db()
    await application.initialize()
    await application.start()
    if WEBHOOK_URL:
        await application.bot.set_webhook(WEBHOOK_URL)
        logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_cleanup(app):
    await application.stop()

application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

app = web.Application()
app.router.add_post(f"/{BOT_TOKEN}", handle_webhook)
app.on_startup.append(on_startup)
app.on_cleanup.append(on_cleanup)

if __name__ == "__main__":
    web.run_app(app, port=PORT)
