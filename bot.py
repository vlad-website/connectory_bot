import logging
import os
import json
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
import asyncio

ADMIN_ID = 491000185

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    filename="bot.log",
    filemode="a",
)
logger = logging.getLogger(__name__)

users = {}
waiting_users = []
active_chats = {}

topics = {
    "IT": ["–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–î–∏–∑–∞–π–Ω", "AI", "–ö–∞—Ä—å–µ—Ä–∞ –≤ IT"],
    "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è": ["–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞", "–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å", "–û—Ç–Ω–æ—à–µ–Ω–∏—è", "–ú–æ—Ç–∏–≤–∞—Ü–∏—è"],
    "–•–æ–±–±–∏": ["–ò–≥—Ä—ã", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–ö–Ω–∏–≥–∏", "–ú—É–∑—ã–∫–∞"],
    "–ë–∏–∑–Ω–µ—Å": ["–°—Ç–∞—Ä—Ç–∞–ø—ã", "–ü–æ–∏—Å–∫ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤", "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–§–∏–Ω–∞–Ω—Å—ã"],
    "–ö—É–ª—å—Ç—É—Ä–∞ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ": ["–§–∏–ª—å–º—ã", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–ñ–∏–≤–æ–ø–∏—Å—å", "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è"],
    "–ó–¥–æ—Ä–æ–≤—å–µ –∏ —Å–ø–æ—Ä—Ç": ["–§–∏—Ç–Ω–µ—Å", "–ü–∏—Ç–∞–Ω–∏–µ", "–ú–µ–¥–∏—Ç–∞—Ü–∏—è", "–ó–û–ñ"],
}

for theme in topics:
    if "–õ—é–±–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è" not in topics[theme]:
        topics[theme].append("–õ—é–±–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è")

def main_menu_keyboard():
    return ReplyKeyboardMarkup(
        [["üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"], ["‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"], ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]],
        resize_keyboard=True,
    )

def subcategories_keyboard(theme):
    keyboard = [[sub] for sub in topics[theme]]
    keyboard.append(["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def searching_options_keyboard():
    return ReplyKeyboardMarkup(
        [["–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–∏—Å–∫"], ["–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞"], ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]],
        resize_keyboard=True,
    )

def dialog_keyboard():
    return ReplyKeyboardMarkup(
        [["–ù–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"], ["‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"]],
        resize_keyboard=True,
    )

def cancel_search_keyboard():
    return ReplyKeyboardMarkup(
        [["‚õî –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫"]],
        resize_keyboard=True,
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    users[user_id] = {"state": "choosing_theme"}
    description = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –∏ –æ–±—â–µ–Ω–∏—è –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º.\n"
        "–í—ã–±–∏—Ä–∞–π —Ç–µ–º—É –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚Äî —è –Ω–∞–π–¥—É —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞!\n"
        "–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è –æ–±—â–µ–Ω–∏—è:"
    )
    keyboard = [[key] for key in topics.keys()]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(description, reply_markup=reply_markup)

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text

    if user_id not in users:
        users[user_id] = {"state": "choosing_theme"}
    state = users[user_id]["state"]

    if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if user_id in waiting_users:
            waiting_users.remove(user_id)
        users[user_id]["state"] = "choosing_theme"
        keyboard = [[key] for key in topics.keys()]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=reply_markup)
        return

    if text == "‚õî –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫":
        if user_id in waiting_users:
            waiting_users.remove(user_id)
        users[user_id]["state"] = "menu"
        await update.message.reply_text("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_menu_keyboard())
        return

    if state == "choosing_theme" and text in topics:
        users[user_id]["theme"] = text
        users[user_id]["state"] = "choosing_sub"
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=subcategories_keyboard(text))
        return

    if state == "choosing_sub":
        theme = users[user_id].get("theme")
        if theme and text in topics.get(theme, []):
            users[user_id]["sub"] = text
            users[user_id]["state"] = "menu"
            await update.message.reply_text(
                f"–û—Ç–ª–∏—á–Ω–æ! –í—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞: ¬´{theme}¬ª –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: ¬´{text}¬ª.",
                reply_markup=main_menu_keyboard(),
            )
            increment_stats(theme, text)
            return
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª.")
        return

    if state == "menu":
        if text == "üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞":
            await start_searching(update, context, user_id)
            return
        elif text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥":
            await end_dialog(update, context, user_id)
            return
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
            return

    if state == "chatting":
        if text == "–ù–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞":
            await start_searching(update, context, user_id)
            return
        elif text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥":
            await end_dialog(update, context, user_id)
            return
        else:
            partner_id = active_chats.get(user_id)
            if partner_id:
                await context.bot.send_message(chat_id=partner_id, text=text)
            return

    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ç–µ–º—É –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª.")

async def start_searching(update, context, user_id):
    state = users[user_id]["state"]
    if state == "searching":
        await update.message.reply_text("–í—ã —É–∂–µ –∏—â–µ—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")
        return
    if state == "chatting":
        await update.message.reply_text("–í—ã —É–∂–µ –≤ –¥–∏–∞–ª–æ–≥–µ. –ù–∞–∂–º–∏—Ç–µ ¬´‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥¬ª –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
        return

    theme = users[user_id].get("theme")
    sub = users[user_id].get("sub")

    if not theme or not sub:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
        return

    users[user_id]["state"] = "searching"
    waiting_users.append(user_id)
    await update.message.reply_text("–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...", reply_markup=cancel_search_keyboard())

    partner_id = find_partner(user_id)
    if partner_id:
        await start_chat(update, context, user_id, partner_id)
        return

    try:
        await asyncio.wait_for(wait_for_partner(user_id), timeout=60)
    except asyncio.TimeoutError:
        if users[user_id]["state"] == "searching":
            await update.message.reply_text(
                "–°–µ–π—á–∞—Å –≤—Å–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∏ –∑–∞–Ω—è—Ç—ã, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞.",
                reply_markup=searching_options_keyboard(),
            )

async def wait_for_partner(user_id):
    while users.get(user_id, {}).get("state") == "searching" and user_id in waiting_users:
        await asyncio.sleep(1)

def find_partner(user_id):
    theme = users[user_id].get("theme")
    sub = users[user_id].get("sub")

    for other_id in waiting_users:
        if other_id == user_id:
            continue
        if users[other_id].get("theme") == theme:
            other_sub = users[other_id].get("sub")
            if sub == "–õ—é–±–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è" or other_sub == "–õ—é–±–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è" or sub == other_sub:
                waiting_users.remove(user_id)
                waiting_users.remove(other_id)
                return other_id
    return None

async def start_chat(update, context, user_id, partner_id):
    users[user_id]["state"] = "chatting"
    users[partner_id]["state"] = "chatting"
    active_chats[user_id] = partner_id
    active_chats[partner_id] = user_id

    theme = users[user_id].get("theme")
    sub = users[user_id].get("sub")
    partner_sub = users[partner_id].get("sub")

    if sub == "–õ—é–±–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è" and partner_sub != "–õ—é–±–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è":
        sub_display = partner_sub
    elif partner_sub == "–õ—é–±–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è" and sub != "–õ—é–±–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è":
        sub_display = sub
    elif sub == "–õ—é–±–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è" and partner_sub == "–õ—é–±–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è":
        sub_display = "–õ—é–±–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è"
    else:
        sub_display = sub

    msg = f"–í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É.\n–¢–µ–º–∞: ¬´{theme}¬ª\n–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: ¬´{sub_display}¬ª"

    await context.bot.send_message(chat_id=user_id, text=msg, reply_markup=dialog_keyboard())
    await context.bot.send_message(chat_id=partner_id, text=msg, reply_markup=dialog_keyboard())

async def end_dialog(update, context, user_id):
    state = users[user_id]["state"]
    if state == "chatting":
        partner_id = active_chats.get(user_id)
        if partner_id:
            await context.bot.send_message(chat_id=partner_id, text="–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥.", reply_markup=main_menu_keyboard())
            users[partner_id]["state"] = "menu"
            active_chats.pop(partner_id, None)
        active_chats.pop(user_id, None)
        users[user_id]["state"] = "menu"
        await update.message.reply_text("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=main_menu_keyboard())
    elif state == "searching":
        if user_id in waiting_users:
            waiting_users.remove(user_id)
        users[user_id]["state"] = "menu"
        await update.message.reply_text("–ü–æ–∏—Å–∫ –ø—Ä–µ—Ä–≤–∞–Ω.", reply_markup=main_menu_keyboard())
    else:
        await update.message.reply_text("–í—ã –Ω–µ –≤ –¥–∏–∞–ª–æ–≥–µ.")

def increment_stats(theme, sub):
    try:
        with open("stats.json", "r", encoding="utf-8") as f:
            stats = json.load(f)
    except Exception:
        stats = {}

    if theme not in stats:
        stats[theme] = {}
    if sub not in stats[theme]:
        stats[theme][sub] = 0
    stats[theme][sub] += 1

    with open("stats.json", "w", encoding="utf-8") as f:
        json.dump(stats, f, ensure_ascii=False, indent=2)

async def stats_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    try:
        with open("stats.json", "r", encoding="utf-8") as f:
            stats = json.load(f)
    except Exception:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
        return

    if not stats:
        await update.message.reply_text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
        return

    response = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏:*\n\n"
    for theme, subs in stats.items():
        total_theme = sum(subs.values())
        response += f"‚Ä¢ *{theme}* ‚Äî {total_theme} –≤—ã–±–æ—Ä–æ–≤\n"
        for sub, count in subs.items():
            response += f"    - {sub}: {count}\n"
        response += "\n"

    await update.message.reply_text(response, parse_mode="Markdown")

if __name__ == "__main__":
    TOKEN = os.getenv("BOT_TOKEN")
    if not TOKEN:
        print("–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        exit(1)

    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", stats_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    app.run_polling()
