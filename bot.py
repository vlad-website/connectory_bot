import os
import logging
import asyncio
import json
from aiohttp import web

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

from db import init_db, get_user, create_user, update_user_state, update_user_nickname, update_user_gender

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    filename="bot.log",
    filemode="a"
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.getenv("PORT", 8080))

application = ApplicationBuilder().token(BOT_TOKEN).build()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã ---
STATE_NICKNAME = "nickname"
STATE_GENDER = "gender"

waiting_queue = asyncio.Queue()
active_chats = {}
waiting_events = {}

topics = {
    "IT": ["–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–î–∏–∑–∞–π–Ω", "AI", "–ö–∞—Ä—å–µ—Ä–∞ –≤ IT"],
    "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è": ["–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞", "–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å", "–û—Ç–Ω–æ—à–µ–Ω–∏—è", "–ú–æ—Ç–∏–≤–∞—Ü–∏—è"],
    "–•–æ–±–±–∏": ["–ò–≥—Ä—ã", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–ö–Ω–∏–≥–∏", "–ú—É–∑—ã–∫–∞"],
    "–ë–∏–∑–Ω–µ—Å": ["–°—Ç–∞—Ä—Ç–∞–ø—ã", "–ü–æ–∏—Å–∫ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤", "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–§–∏–Ω–∞–Ω—Å—ã"],
    "–ö—É–ª—å—Ç—É—Ä–∞ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ": ["–§–∏–ª—å–º—ã", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–ñ–∏–≤–æ–ø–∏—Å—å", "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è"],
    "–ó–¥–æ—Ä–æ–≤—å–µ –∏ —Å–ø–æ—Ä—Ç": ["–§–∏—Ç–Ω–µ—Å", "–ü–∏—Ç–∞–Ω–∏–µ", "–ú–µ–¥–∏—Ç–∞—Ü–∏—è", "–ó–û–ñ"]
}
for t in topics:
    topics[t].append("–õ—é–±–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è")

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏ (–≤ –∏–¥–µ–∞–ª–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ë–î)
users = {}

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def keyboard_main_menu():
    return ReplyKeyboardMarkup([["üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"], ["‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"], ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)

def keyboard_subcategories(theme):
    return ReplyKeyboardMarkup([[sub] for sub in topics[theme]] + [["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)

def keyboard_searching():
    return ReplyKeyboardMarkup([["–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–∏—Å–∫"], ["–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞"], ["‚õî –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫"], ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True)

def keyboard_dialog():
    return ReplyKeyboardMarkup([["–ù–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"], ["‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"]], resize_keyboard=True)

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = await get_user(user_id)

    if user:
        users[user_id] = dict(user)  # —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –ø–∞–º—è—Ç—å—é
        nickname = user.get("nickname") or "–¥—Ä—É–≥"
        await update.message.reply_text(
            f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {nickname}!",
            reply_markup=ReplyKeyboardMarkup([[k] for k in topics], resize_keyboard=True)
        )
    else:
        await create_user(user_id)
        await update_user_state(user_id, STATE_NICKNAME)
        users[user_id] = {"state": STATE_NICKNAME}
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –∏ –æ–±—â–µ–Ω–∏—è –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º.\n"
            "–í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–∏–∫ (–∏–º—è, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ç–µ–±—è —É–≤–∏–¥–∏—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫):"
        )

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    user = users.get(user_id)
    if not user:
        user_db = await get_user(user_id)
        if user_db:
            users[user_id] = dict(user_db)
            user = users[user_id]
        else:
            await create_user(user_id)
            await update_user_state(user_id, STATE_NICKNAME)
            users[user_id] = {"state": STATE_NICKNAME}
            await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–∏–∫:")
            return

    state = user.get("state", "")
    logger.info(f"User {user_id} state: {state}, message: {text}")

    # –ê–Ω–∫–µ—Ç–∞: –Ω–∏–∫–Ω–µ–π–º
    if state == STATE_NICKNAME:
        await update_user_nickname(user_id, text[:32])
        await update_user_state(user_id, STATE_GENDER)
        user["state"] = STATE_GENDER
        await update.message.reply_text(
            f"–°–ø–∞—Å–∏–±–æ, {text[:32]}! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:",
            reply_markup=ReplyKeyboardMarkup(
                [["–ú—É–∂—Å–∫–æ–π"], ["–ñ–µ–Ω—Å–∫–∏–π"], ["–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å"]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        return

    # –ê–Ω–∫–µ—Ç–∞: –ø–æ–ª
    if state == STATE_GENDER:
        if text not in ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π", "–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å"]:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
            return
        await update_user_gender(user_id, text)
        await update_user_state(user_id, "choosing_theme")
        user["state"] = "choosing_theme"
        await update.message.reply_text(
            "‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è –æ–±—â–µ–Ω–∏—è:",
            reply_markup=ReplyKeyboardMarkup([[k] for k in topics], resize_keyboard=True)
        )
        return

    if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update_user_state(user_id, "choosing_theme")
        user["state"] = "choosing_theme"
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=ReplyKeyboardMarkup([[k] for k in topics], resize_keyboard=True))
        return

    if state == "choosing_theme" and text in topics:
        user["theme"] = text
        user["state"] = "choosing_sub"
        await update_user_state(user_id, "choosing_sub")
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard_subcategories(text))
        return

    if state == "choosing_sub":
        theme = user.get("theme")
        if text in topics.get(theme, []):
            user["sub"] = text
            user["state"] = "menu"
            await update_user_state(user_id, "menu")
            increment_stats(theme, text)
            await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {theme} / {text}", reply_markup=keyboard_main_menu())
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    if state == "menu":
        if text == "üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞":
            await start_searching(update, context, user_id)
        elif text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥":
            await end_dialog(update, context, user_id)
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
        return

    if state == "searching":
        if text == "‚õî –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫":
            await cancel_search(update, context, user_id)
        elif text == "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞":
            await cancel_search(update, context, user_id)
            await start_searching(update, context, user_id)
        else:
            await update.message.reply_text("–í—ã —É–∂–µ –≤ –ø–æ–∏—Å–∫–µ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.")
        return

    if state == "chatting":
        if text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥":
            await end_dialog(update, context, user_id)
        elif text == "–ù–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞":
            await start_searching(update, context, user_id)
        else:
            partner_id = active_chats.get(user_id)
            if partner_id:
                await context.bot.send_message(partner_id, text=text)
        return

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª.")

# --- –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ ---
async def start_searching(update, context, user_id):
    user = users.get(user_id)
    if not user:
        await update.message.reply_text("–û—à–∏–±–∫–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if user.get("state") in ["searching", "chatting"]:
        await update.message.reply_text("–í—ã —É–∂–µ –∏—â–µ—Ç–µ –∏–ª–∏ –≤ –¥–∏–∞–ª–æ–≥–µ.")
        return

    theme = user.get("theme")
    sub = user.get("sub")

    if not theme or not sub:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
        return

    user["state"] = "searching"
    await update_user_state(user_id, "searching")
    await waiting_queue.put(user_id)

    asyncio.create_task(search_partner_background(context, user_id))
    await update.message.reply_text("–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...", reply_markup=keyboard_searching())

async def search_partner_background(context, user_id):
    waiting_events[user_id] = asyncio.Event()
    await try_match_partner(user_id, context)

    try:
        await asyncio.wait_for(waiting_events[user_id].wait(), timeout=60)
    except asyncio.TimeoutError:
        await remove_from_queue(user_id)
        user = users.get(user_id)
        if user and user.get("state") == "searching":
            user["state"] = "menu"
            await update_user_state(user_id, "menu")
            await context.bot.send_message(user_id, "–°–µ–π—á–∞—Å –≤—Å–µ –∑–∞–Ω—è—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=keyboard_main_menu())
    finally:
        waiting_events.pop(user_id, None)

async def try_match_partner(user_id, context):
    user = users.get(user_id)
    if not user or user.get("state") != "searching":
        return

    theme, sub = user.get("theme"), user.get("sub")

    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–∞—Ä—É
    candidates = []
    for candidate_id in list(waiting_queue._queue):
        if candidate_id == user_id:
            continue
        c_user = users.get(candidate_id)
        if not c_user or c_user.get("state") != "searching":
            continue
        if c_user.get("theme") == theme and c_user.get("sub") == sub:
            candidates.append(candidate_id)

    if candidates:
        partner_id = candidates[0]
        await remove_from_queue(user_id)
        await remove_from_queue(partner_id)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Ç
        active_chats[user_id] = partner_id
        active_chats[partner_id] = user_id

        users[user_id]["state"] = "chatting"
        users[partner_id]["state"] = "chatting"

        await update_user_state(user_id, "chatting")
        await update_user_state(partner_id, "chatting")

        await context.bot.send_message(user_id, "‚úÖ –ü–∞—Ä—Ç–Ω—ë—Ä –Ω–∞–π–¥–µ–Ω! –ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ.\n–ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥.", reply_markup=keyboard_dialog())
        await context.bot.send_message(partner_id, "‚úÖ –ü–∞—Ä—Ç–Ω—ë—Ä –Ω–∞–π–¥–µ–Ω! –ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ.\n–ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥.", reply_markup=keyboard_dialog())

        # –°–∏–≥–Ω–∞–ª–∏–º –æ–∂–∏–¥–∞—é—â–µ–º—É
        if waiting_events.get(user_id):
            waiting_events[user_id].set()
        if waiting_events.get(partner_id):
            waiting_events[partner_id].set()

async def remove_from_queue(user_id):
    try:
        # –û—á–∏—Å—Ç–∫–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        new_queue = asyncio.Queue()
        while not waiting_queue.empty():
            uid = await waiting_queue.get()
            if uid != user_id:
                await new_queue.put(uid)
        while not new_queue.empty():
            uid = await new_queue.get()
            await waiting_queue.put(uid)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ {user_id}: {e}")

async def cancel_search(update, context, user_id):
    await remove_from_queue(user_id)
    user = users.get(user_id)
    if user:
        user["state"] = "menu"
        await update_user_state(user_id, "menu")
    await update.message.reply_text("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=keyboard_main_menu())

async def end_dialog(update, context, user_id):
    partner_id = active_chats.pop(user_id, None)
    if partner_id:
        active_chats.pop(partner_id, None)
        partner = users.get(partner_id)
        if partner:
            partner["state"] = "menu"
            await update_user_state(partner_id, "menu")
            await context.bot.send_message(partner_id, "–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º.", reply_markup=keyboard_main_menu())
    user = users.get(user_id)
    if user:
        user["state"] = "menu"
        await update_user_state(user_id, "menu")
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=keyboard_main_menu())

# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ø—Ä–æ—Å—Ç–µ–π—à–∞—è) ---
stats = {}

def increment_stats(theme, sub):
    key = f"{theme} / {sub}"
    stats[key] = stats.get(key, 0) + 1

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ ---
async def handle_webhook(request):
    try:
        data = await request.json()
        update = Update.de_json(data, application.bot)
        await application.process_update(update)
        return web.Response(text="ok")
    except Exception as e:
        logger.error(f"Webhook error: {e}", exc_info=True)
        return web.Response(status=500, text="error")

# --- –ó–∞–ø—É—Å–∫ ---
async def on_startup(app):
    await application.initialize()
    await init_db()
    await application.start()

    if WEBHOOK_URL:
        await application.bot.set_webhook(WEBHOOK_URL)
        logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    else:
        logger.error("WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")

async def on_cleanup(app):
    await application.stop()

# –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

# aiohttp —Å–µ—Ä–≤–µ—Ä
app = web.Application()
app.router.add_post(f"/{BOT_TOKEN}", handle_webhook)
app.on_startup.append(on_startup)
app.on_cleanup.append(on_cleanup)

if __name__ == "__main__":
    web.run_app(app, port=PORT)
