import logging
import os
import asyncio
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª
logging.basicConfig(
    filename="bot.log",
    filemode="a",
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–≤–∞—à Telegram ID)
ADMIN_ID = 123456789  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram ID

users = {}
waiting_users = []
active_chats = {}
stats = {}

topics = {
    "IT": ["–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–î–∏–∑–∞–π–Ω", "AI", "–ö–∞—Ä—å–µ—Ä–∞ –≤ IT"],
    "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è": ["–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞", "–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å", "–û—Ç–Ω–æ—à–µ–Ω–∏—è", "–ú–æ—Ç–∏–≤–∞—Ü–∏—è"],
    "–•–æ–±–±–∏": ["–ò–≥—Ä—ã", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–ö–Ω–∏–≥–∏", "–ú—É–∑—ã–∫–∞"],
    "–ë–∏–∑–Ω–µ—Å": ["–°—Ç–∞—Ä—Ç–∞–ø—ã", "–ü–æ–∏—Å–∫ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤", "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–§–∏–Ω–∞–Ω—Å—ã"],
    "–ö—É–ª—å—Ç—É—Ä–∞ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ": ["–§–∏–ª—å–º—ã", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–ñ–∏–≤–æ–ø–∏—Å—å", "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è"],
    "–ó–¥–æ—Ä–æ–≤—å–µ –∏ —Å–ø–æ—Ä—Ç": ["–§–∏—Ç–Ω–µ—Å", "–ü–∏—Ç–∞–Ω–∏–µ", "–ú–µ–¥–∏—Ç–∞—Ü–∏—è", "–ó–û–ñ"],
}

def main_menu_keyboard():
    return ReplyKeyboardMarkup(
        [["üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"], ["‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"], ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]],
        resize_keyboard=True,
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    users[user_id] = {"state": "choosing_theme"}
    keyboard = [[key] for key in topics.keys()]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –∏ –æ–±—â–µ–Ω–∏—è –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞:",
        reply_markup=reply_markup,
    )

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text
    logging.info(f"User {user_id} sent: {text}")

    if user_id not in users:
        users[user_id] = {"state": "choosing_theme"}

    state = users[user_id]["state"]

    if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        users[user_id] = {"state": "choosing_theme"}
        keyboard = [[key] for key in topics.keys()]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=reply_markup)
        return

    if state == "choosing_theme" and text in topics:
        users[user_id]["theme"] = text
        users[user_id]["state"] = "choosing_sub"
        keyboard = [[sub] for sub in topics[text]]
        keyboard.append(["–õ—é–±–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è"])
        keyboard.append(["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)
        return

    if state == "choosing_sub":
        theme = users[user_id].get("theme")
        if theme:
            if text == "–õ—é–±–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è":
                users[user_id]["sub"] = None
            elif text in topics[theme]:
                users[user_id]["sub"] = text
            else:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª.")
                return
            users[user_id]["state"] = "menu"
            selected_sub = users[user_id]["sub"]
            await update.message.reply_text(
                f"–í—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞: ¬´{theme}¬ª{f" –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: ¬´{selected_sub}¬ª" if selected_sub else " (–ª—é–±–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è)"}.",
                reply_markup=main_menu_keyboard(),
            )
            return

    if state == "menu":
        if text == "üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞":
            await update.message.reply_text("–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")
            await find_partner(update, context)
            return
        elif text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥":
            await end_chat(user_id, context)
            await update.message.reply_text("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=main_menu_keyboard())
            return
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
            return

    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ç–µ–º—É –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª.")

async def find_partner(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    theme = users[user_id].get("theme")
    sub = users[user_id].get("sub")

    for uid in waiting_users:
        if uid != user_id and users[uid].get("theme") == theme:
            if sub is None or users[uid].get("sub") is None or users[uid].get("sub") == sub:
                waiting_users.remove(uid)
                active_chats[user_id] = uid
                active_chats[uid] = user_id
                users[user_id]["state"] = "in_chat"
                users[uid]["state"] = "in_chat"
                partner_sub = users[uid].get("sub")

                # –£–≤–µ–ª–∏—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats[user_id] = stats.get(user_id, 0) + 1
                stats[uid] = stats.get(uid, 0) + 1

                for uid1 in [user_id, uid]:
                    msg = f"–í—ã —Å–æ–µ–¥–∏–Ω–µ–Ω—ã –ø–æ —Ç–µ–º–µ ¬´{theme}¬ª"
                    other_sub = users[uid2 := active_chats[uid1]].get("sub")
                    if other_sub:
                        msg += f" –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{other_sub}¬ª"
                    await context.bot.send_message(uid1, msg)
                return

    waiting_users.append(user_id)
    await asyncio.sleep(60)
    if user_id in waiting_users:
        waiting_users.remove(user_id)
        keyboard = [["üîç –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫"], ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
        await update.message.reply_text(
            "–°–µ–π—á–∞—Å –≤—Å–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∏ –∑–∞–Ω—è—Ç—ã –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ. –ß—Ç–æ –¥–∞–ª—å—à–µ?",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        )
        users[user_id]["state"] = "menu"

async def end_chat(user_id: int, context: ContextTypes.DEFAULT_TYPE):
    partner_id = active_chats.pop(user_id, None)
    if partner_id:
        active_chats.pop(partner_id, None)
        await context.bot.send_message(partner_id, "–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥.", reply_markup=main_menu_keyboard())
        users[partner_id]["state"] = "menu"
    users[user_id]["state"] = "menu"

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != ADMIN_ID:
        return
    message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for uid, count in stats.items():
        message += f"üë§ {uid}: {count} –ø–æ–∏—Å–∫–æ–≤\n"
    await update.message.reply_text(message or "–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

if __name__ == "__main__":
    TOKEN = os.getenv("BOT_TOKEN")
    if not TOKEN:
        print("–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        exit(1)

    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", stats_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    app.run_polling()
