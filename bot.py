import logging
import os
import json
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
import asyncio

# ---------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ----------

ADMIN_ID = 491000185

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    filename="bot.log",
    filemode="a",
)
logger = logging.getLogger(__name__)

users = {}
waiting_queue = asyncio.Queue()  # –û—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è
active_chats = {}
waiting_events = {}  # user_id -> asyncio.Event()

topics = {
    "IT": ["–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–î–∏–∑–∞–π–Ω", "AI", "–ö–∞—Ä—å–µ—Ä–∞ –≤ IT"],
    "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è": ["–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞", "–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å", "–û—Ç–Ω–æ—à–µ–Ω–∏—è", "–ú–æ—Ç–∏–≤–∞—Ü–∏—è"],
    "–•–æ–±–±–∏": ["–ò–≥—Ä—ã", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–ö–Ω–∏–≥–∏", "–ú—É–∑—ã–∫–∞"],
    "–ë–∏–∑–Ω–µ—Å": ["–°—Ç–∞—Ä—Ç–∞–ø—ã", "–ü–æ–∏—Å–∫ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤", "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–§–∏–Ω–∞–Ω—Å—ã"],
    "–ö—É–ª—å—Ç—É—Ä–∞ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ": ["–§–∏–ª—å–º—ã", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–ñ–∏–≤–æ–ø–∏—Å—å", "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è"],
    "–ó–¥–æ—Ä–æ–≤—å–µ –∏ —Å–ø–æ—Ä—Ç": ["–§–∏—Ç–Ω–µ—Å", "–ü–∏—Ç–∞–Ω–∏–µ", "–ú–µ–¥–∏—Ç–∞—Ü–∏—è", "–ó–û–ñ"],
}

for theme in topics:
    if "–õ—é–±–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è" not in topics[theme]:
        topics[theme].append("–õ—é–±–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è")

# ---------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------

def main_menu_keyboard():
    return ReplyKeyboardMarkup(
        [["üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"], ["‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"], ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]],
        resize_keyboard=True,
    )

def subcategories_keyboard(theme):
    keyboard = [[sub] for sub in topics[theme]]
    keyboard.append(["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def searching_options_keyboard():
    return ReplyKeyboardMarkup(
        [["–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–∏—Å–∫"], ["–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞"], ["‚õî –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫"], ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]],
        resize_keyboard=True,
    )

def dialog_keyboard():
    return ReplyKeyboardMarkup(
        [["–ù–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"], ["‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"]],
        resize_keyboard=True,
    )

# ---------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ----------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    users[user_id] = {"state": "choosing_theme"}
    logger.info(f"User {user_id} started bot.")
    description = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –∏ –æ–±—â–µ–Ω–∏—è –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º.\n"
        "–í—ã–±–∏—Ä–∞–π —Ç–µ–º—É –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚Äî —è –Ω–∞–π–¥—É —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞!\n"
        "–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è –æ–±—â–µ–Ω–∏—è:"
    )
    keyboard = [[key] for key in topics.keys()]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(description, reply_markup=reply_markup)

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text

    if user_id not in users:
        users[user_id] = {"state": "choosing_theme"}
    state = users[user_id]["state"]

    logger.info(f"User {user_id} sent message: {text}")

    if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        users[user_id]["state"] = "choosing_theme"
        keyboard = [[key] for key in topics.keys()]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=reply_markup)
        return

    if state == "choosing_theme" and text in topics:
        users[user_id]["theme"] = text
        users[user_id]["state"] = "choosing_sub"
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=subcategories_keyboard(text))
        return

    if state == "choosing_sub":
        theme = users[user_id].get("theme")
        if theme and text in topics.get(theme, []):
            users[user_id]["sub"] = text
            users[user_id]["state"] = "menu"
            await update.message.reply_text(
                f"–û—Ç–ª–∏—á–Ω–æ! –í—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞: ¬´{theme}¬ª –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: ¬´{text}¬ª.",
                reply_markup=main_menu_keyboard(),
            )
            logger.info(f"User {user_id} –≤—ã–±—Ä–∞–ª —Ç–µ–º—É '{theme}' –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é '{text}'")
            increment_stats(theme, text)
            return

        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª.")
        return

    if state == "menu":
        if text == "üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞":
            await start_searching(update, context, user_id)
            return
        elif text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥":
            await end_dialog(update, context, user_id)
            return
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
            return

    if state == "searching":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞
        if text == "‚õî –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫":
            await cancel_search(update, context, user_id)
            return
        elif text == "–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–∏—Å–∫":
            await update.message.reply_text("–ü—Ä–æ–¥–ª–µ–≤–∞—é –ø–æ–∏—Å–∫...")
            # –ü—Ä–æ—Å—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è, –∑–∞–ø—É—Å—Ç–∏–≤ –∑–∞–Ω–æ–≤–æ –ø–æ–∏—Å–∫
            # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è: –Ω–µ –¥–µ–ª–∞–µ–º –∑–¥–µ—Å—å, –ø–æ–∏—Å–∫ —É–∂–µ –∏–¥—ë—Ç –≤ —Ñ–æ–Ω–µ
            return
        elif text == "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞":
            await cancel_search(update, context, user_id)
            await start_searching(update, context, user_id)
            return
        else:
            await update.message.reply_text("–í—ã —Å–µ–π—á–∞—Å –≤ –ø–æ–∏—Å–∫–µ, –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –ø–æ–∏—Å–∫.")
            return

    if state == "chatting":
        if text == "–ù–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞":
            await start_searching(update, context, user_id)
            return
        elif text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥":
            await end_dialog(update, context, user_id)
            return
        else:
            partner_id = active_chats.get(user_id)
            if partner_id:
                await context.bot.send_message(chat_id=partner_id, text=text)
            return

    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ç–µ–º—É –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª.")

# ---------- –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ ----------

async def start_searching(update, context, user_id):
    state = users[user_id].get("state")
    if state == "searching":
        await update.message.reply_text("–í—ã —É–∂–µ –∏—â–µ—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")
        return
    if state == "chatting":
        await update.message.reply_text("–í—ã —É–∂–µ –≤ –¥–∏–∞–ª–æ–≥–µ. –ù–∞–∂–º–∏—Ç–µ ¬´‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥¬ª –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
        return

    theme = users[user_id].get("theme")
    sub = users[user_id].get("sub")
    if not theme or not sub:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
        return

    users[user_id]["state"] = "searching"
    waiting_events[user_id] = asyncio.Event()
    await waiting_queue.put(user_id)
    logger.info(f"User {user_id} –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–º–µ '{theme}' –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{sub}'")

    await update.message.reply_text("–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...", reply_markup=searching_options_keyboard())

    # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    await try_match_partner(user_id, context)

    try:
        # –ñ–¥—ë–º –ª–∏–±–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞, –ª–∏–±–æ –æ—Ç–º–µ–Ω—ã, —Å —Ç–∞–π–º–∞—É—Ç–æ–º 60 —Å–µ–∫—É–Ω–¥
        await asyncio.wait_for(waiting_events[user_id].wait(), timeout=60)
    except asyncio.TimeoutError:
        if users[user_id].get("state") == "searching":
            await update.message.reply_text(
                "–°–µ–π—á–∞—Å –≤—Å–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∏ –∑–∞–Ω—è—Ç—ã, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞.",
                reply_markup=searching_options_keyboard(),
            )
            # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è, –µ—Å–ª–∏ –µ—â—ë —Ç–∞–º
            await remove_from_queue(user_id)
            users[user_id]["state"] = "menu"
    finally:
        waiting_events.pop(user_id, None)

async def try_match_partner(user_id, context):
    """–ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –¥–ª—è user_id –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
    if users[user_id].get("state") != "searching":
        return

    theme = users[user_id].get("theme")
    sub = users[user_id].get("sub")

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –æ—á–µ—Ä–µ–¥–∏, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ
    qsize = waiting_queue.qsize()
    temp_users = []
    partner_id = None

    for _ in range(qsize):
        other_id = await waiting_queue.get()
        if other_id == user_id:
            temp_users.append(other_id)
            continue

        other_theme = users.get(other_id, {}).get("theme")
        other_sub = users.get(other_id, {}).get("sub")

        if not other_theme or not other_sub:
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            temp_users.append(other_id)
            continue

        if other_theme == theme and (sub == "–õ—é–±–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è" or other_sub == "–õ—é–±–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è" or sub == other_sub):
            partner_id = other_id
            break
        else:
            temp_users.append(other_id)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å, –∫—Ä–æ–º–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞
    for u in temp_users:
        await waiting_queue.put(u)

    if partner_id:
        # –£–±–∏—Ä–∞–µ–º user_id –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (–µ—Å–ª–∏ —Ç–∞–º)
        await remove_from_queue(user_id)

        # –ù–∞—á–∏–Ω–∞–µ–º —á–∞—Ç
        await start_chat(context.bot, user_id, partner_id)

async def remove_from_queue(user_id):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å"""
    temp_users = []
    removed = False
    while not waiting_queue.empty():
        u = await waiting_queue.get()
        if u != user_id:
            temp_users.append(u)
        else:
            removed = True
    for u in temp_users:
        await waiting_queue.put(u)
    return removed

async def start_chat(bot, user_id, partner_id):
    users[user_id]["state"] = "chatting"
    users[partner_id]["state"] = "chatting"
    active_chats[user_id] = partner_id
    active_chats[partner_id] = user_id

    theme = users[user_id].get("theme")
    sub = users[user_id].get("sub")
    partner_sub = users[partner_id].get("sub")

    if sub == "–õ—é–±–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è" and partner_sub != "–õ—é–±–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è":
        sub_display = partner_sub
    elif partner_sub == "–õ—é–±–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è" and sub != "–õ—é–±–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è":
        sub_display = sub
    elif sub == "–õ—é–±–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è" and partner_sub == "–õ—é–±–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è":
        sub_display = "–õ—é–±–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è"
    else:
        sub_display = sub

    msg_user = f"–í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É.\n–¢–µ–º–∞: ¬´{theme}¬ª\n–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: ¬´{sub_display}¬ª"
    msg_partner = f"–í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É.\n–¢–µ–º–∞: ¬´{theme}¬ª\n–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: ¬´{sub_display}¬ª"

    await bot.send_message(chat_id=user_id, text=msg_user, reply_markup=dialog_keyboard())
    await bot.send_message(chat_id=partner_id, text=msg_partner, reply_markup=dialog_keyboard())

    logger.info(f"User {user_id} –∏ User {partner_id} –Ω–∞—á–∞–ª–∏ —á–∞—Ç –ø–æ —Ç–µ–º–µ '{theme}' –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{sub_display}'")

    # –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–±–æ—Ä–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞
    if user_id in waiting_events:
        waiting_events[user_id].set()
    if partner_id in waiting_events:
        waiting_events[partner_id].set()

async def cancel_search(update, context, user_id):
    if users[user_id].get("state") == "searching":
        users[user_id]["state"] = "menu"
        await remove_from_queue(user_id)
        if user_id in waiting_events:
            waiting_events[user_id].set()  # –ü—Ä–µ—Ä–≤–∞—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ
        await update.message.reply_text("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_menu_keyboard())
        logger.info(f"User {user_id} –æ—Ç–º–µ–Ω–∏–ª –ø–æ–∏—Å–∫.")
    else:
        await update.message.reply_text("–í—ã –Ω–µ –≤ –ø–æ–∏—Å–∫–µ.")

async def end_dialog(update, context, user_id):
    state = users[user_id]["state"]
    if state == "chatting":
        partner_id = active_chats.get(user_id)
