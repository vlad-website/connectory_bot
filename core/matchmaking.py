import asyncio
from collections import deque
from telegram import Bot

from db.user_queries import (
    update_user_state, update_user_companion, get_user
)
from handlers.keyboards import kb_chat

queue = deque()               # <‚Äî –æ–±—ä—è–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å
active_search_tasks = {}

async def add_to_queue(user_id: int, theme: str, sub: str):
    """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥—å –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–π—Ç–∏ –ø–∞—Ä—É."""
    user = await get_user(user_id)

    # –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    for other_id in list(queue):
        other = await get_user(other_id)
        if not other:
            continue

        same_theme = other["theme"] == theme
        sub_match = (
            sub == other["sub"] or
            sub == "–õ—é–±–∞—è –ø–æ–¥—Ç–µ–º–∞" or
            other["sub"] == "–õ—é–±–∞—è –ø–æ–¥—Ç–µ–º–∞"
        )

        if same_theme and sub_match:
            queue.remove(other_id)

            # –ø–µ—Ä–µ–≤–æ–¥–∏–º –æ–±–æ–∏—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 'chatting'
            await update_user_state(user_id, "chatting")
            await update_user_state(other_id, "chatting")
            await update_user_companion(user_id, other_id)
            await update_user_companion(other_id, user_id)

            # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
            sub_a = sub if sub != "–õ—é–±–∞—è –ø–æ–¥—Ç–µ–º–∞" else other["sub"]
            sub_b = other["sub"] if other["sub"] != "–õ—é–±–∞—è –ø–æ–¥—Ç–µ–º–∞" else sub

            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–æ–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —á–∞—Ç–∞
            await Bot.get_current().send_message(
                user_id,
                f"üéâ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!\n–¢–µ–º–∞: {theme}\n–ü–æ–¥—Ç–µ–º–∞: {sub_a}",
                reply_markup=kb_chat()
            )
            await Bot.get_current().send_message(
                other_id,
                f"üéâ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!\n–¢–µ–º–∞: {theme}\n–ü–æ–¥—Ç–µ–º–∞: {sub_b}",
                reply_markup=kb_chat()
            )
            return

    # –ø–æ–∫–∞ –ø–∞—Ä—ã –Ω–µ—Ç ‚Äî —Å—Ç–∞–≤–∏–º –≤ –æ—á–µ—Ä–µ–¥—å
    queue.append(user_id)

    # —Ç–∞–π–º–µ—Ä –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    task = asyncio.create_task(retry_search(user_id, theme, sub))
    active_search_tasks[user_id] = task

async def retry_search(user_id: int, theme: str, sub: str):
    """–ß–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–∞—Ä—É."""
    await asyncio.sleep(60)
    user = await get_user(user_id)
    if user and user["state"] == "searching":
        await Bot.get_current().send_message(
            user_id,
            "‚è≥ –í—Å—ë –µ—â—ë –∏—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞... –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑."
        )
        await add_to_queue(user_id, theme, sub)

async def is_in_chat(user_id: int) -> bool:
    user = await get_user(user_id)
    return user and user.get("state") == "chatting"

async def remove_from_queue(user_id: int):
    """–£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å."""
    try:
        queue.remove(user_id)
    except ValueError:
        pass
