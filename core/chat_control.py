# core/chat_control.py
import logging
from db.user_queries import get_user, update_user_state, update_user_companion
from handlers.keyboards import kb_after_sub

logger = logging.getLogger(__name__)

async def end_dialog(user_id: int, context, silent: bool = False):
    """
    –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥.
    silent=True ‚Äî –Ω–µ —É–≤–µ–¥–æ–º–ª—è—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è ¬´–ù–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫¬ª).
    """
    user = await get_user(user_id)
    if not user:
        return

    companion_id = user.get("companion_id")

    # –ø–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é
    await update_user_state(user_id, "after_sub")
    await update_user_companion(user_id, None)

    # –ø–µ—Ä–µ–≤–æ–¥–∏–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    if companion_id:
        await update_user_state(companion_id, "after_sub")
        await update_user_companion(companion_id, None)

    # –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º ‚Äî —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–∞–µ–º –≤—Ç–æ—Ä–æ–π —Å—Ç–æ—Ä–æ–Ω–µ –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ (–±–µ–∑ details)
    if silent:
        if companion_id:
            other = await get_user(companion_id)
            try:
                await context.bot.send_message(
                    companion_id,
                    "üí¨ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è.",
                    reply_markup=await kb_after_sub(other) if other else None
                )
            except Exception:
                logger.exception("Failed to notify companion %s about silent end", companion_id)
        return

    # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
    try:
        await context.bot.send_message(
            user_id,
            "üí¨ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.",
            reply_markup=await kb_after_sub(user)
        )
    except Exception:
        logger.exception("Failed to notify user %s about dialog end", user_id)

    if companion_id:
        other = await get_user(companion_id)
        try:
            await context.bot.send_message(
                companion_id,
                "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥.",
                reply_markup=await kb_after_sub(other) if other else None
            )
        except Exception:
            logger.exception("Failed to notify companion %s about dialog end", companion_id)
