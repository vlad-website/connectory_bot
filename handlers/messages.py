# handlers/messages.py
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from handlers.keyboards import kb_after_sub, kb_searching, kb_chat

import logging

from db.user_queries import (
    get_user, update_user_nickname, update_user_gender,
    update_user_theme, update_user_sub, update_user_state
)
from core.topics import TOPICS
from core.matchmaking import add_to_queue, is_in_chat, remove_from_queue
from core.chat_control import end_dialog

logger = logging.getLogger(__name__)

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.debug("üí¨ MSG: %s", update.message.text)
    user_id = update.effective_user.id
    text = update.message.text.strip()

    user = await get_user(user_id)
    if not user:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start.")
        return

    state = user["state"]
    logger.debug("STATE=%s TEXT=%s", state, text)

    # ---------- –®–ê–ì 1: –ù–∏–∫–Ω–µ–π–º ----------
    if state == "nickname":
        # 1. —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∏–∫
        await update_user_nickname(user_id, text)

        # 2. –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∏–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–∏—Å–∞–Ω
        user_after = await get_user(user_id)
        logger.debug("After nickname update: %s", user_after)

        # 3. –ø–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª–∞
        await update_user_state(user_id, "gender")

        await update.message.reply_text(
            "–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:",
            reply_markup=ReplyKeyboardMarkup(
                [["–ú—É–∂—Å–∫–æ–π"], ["–ñ–µ–Ω—Å–∫–∏–π"], ["–ù–µ –≤–∞–∂–Ω–æ"]], resize_keyboard=True
            )
        )
        return                      # <‚Äì –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è –¥–∞–ª—å—à–µ

    # ---------- –®–ê–ì 2: –ü–æ–ª ----------
    elif state == "gender":
        if text not in ("–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π", "–ù–µ –≤–∞–∂–Ω–æ"):
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª:", 
                reply_markup=ReplyKeyboardMarkup(
                    [["–ú—É–∂—Å–∫–æ–π"], ["–ñ–µ–Ω—Å–∫–∏–π"], ["–ù–µ –≤–∞–∂–Ω–æ"]], resize_keyboard=True
                )
            )
            return

        gender = text            # —É–∂–µ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞
        await update_user_gender(user_id, gender)
        await update_user_state(user_id, "theme")

        keyboard = [[t] for t in TOPICS.keys()]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–±—è —Ç–µ–º—É:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return

    # ---------- –®–ê–ì 3: –¢–µ–º–∞ ----------
    elif state == "theme":
        if text not in TOPICS:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ç–µ–º—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return

        await update_user_theme(user_id, text)
        await update_user_state(user_id, "sub")

        subtopics = TOPICS[text] + ["–õ—é–±–∞—è –ø–æ–¥—Ç–µ–º–∞"]
        keyboard = [[s] for s in subtopics]
        await update.message.reply_text(
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ç–µ–º—É:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return

    # ---------- –®–ê–ì 4: –ü–æ–¥—Ç–µ–º–∞ ----------
    elif state == "sub":
        theme = user["theme"]
        valid_subs = TOPICS.get(theme, []) + ["–õ—é–±–∞—è –ø–æ–¥—Ç–µ–º–∞"]
        if text not in valid_subs:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ç–µ–º—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return

        await update_user_sub(user_id, text)
        await update_user_state(user_id, "menu")           # ‚Üê —Ç–µ–ø–µ—Ä—å 'menu'
        await update.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {theme} / {text}",
            reply_markup=kb_after_sub()                    # ‚Üê –º–µ–Ω—é –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
        )
        return

    # ---------- –ù–æ–≤—ã–π –±–ª–æ–∫ ----------
    elif state == "menu":
        if text == "üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫":
            await update_user_state(user_id, "searching")
            await update.message.reply_text("üîé –ò—â—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...", reply_markup=kb_searching())
            await add_to_queue(user_id, user["theme"], user["sub"])
            return

        if text == "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–µ–º—É":
            await update_user_state(user_id, "sub")
            subtopics = TOPICS[user["theme"]] + ["–õ—é–±–∞—è –ø–æ–¥—Ç–µ–º–∞"]
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ç–µ–º—É:",
                reply_markup=ReplyKeyboardMarkup([[s] for s in subtopics], resize_keyboard=True)
            )
            return

        if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await update_user_state(user_id, "theme")
            keyboard = [[t] for t in TOPICS.keys()]
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–º—É:",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
            return

    # ---------- –ü–æ–∏—Å–∫ ----------
    elif state == "searching":
        if text == "‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫":
            # 1) —É–±–∏—Ä–∞–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            await remove_from_queue(user_id)
            # 2) –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é (–º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ)
            await update_user_state(user_id, "menu")
            await update.message.reply_text(
                "–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.",
                reply_markup=kb_after_sub()           # —Ç–∞ –∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, —á—Ç–æ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ç–µ–º—ã
            )
            return

        if text == "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–µ–º—É":
            await remove_from_queue(user_id)
            await update_user_state(user_id, "sub")
            subtopics = TOPICS[user["theme"]] + ["–õ—é–±–∞—è –ø–æ–¥—Ç–µ–º–∞"]
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥—Ç–µ–º—É:",
                reply_markup=ReplyKeyboardMarkup([[s] for s in subtopics], resize_keyboard=True)
            )
            return

        if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await remove_from_queue(user_id)
            await update_user_state(user_id, "theme")
            keyboard = [[t] for t in TOPICS.keys()]
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏ —Ç–µ–º—É:",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
            return

        if text == "‚ù§Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç":
            await update.message.reply_text(
                "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!\n(–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–Ω–∞—Ç)",
                reply_markup=kb_searching()
            )
            return

        # –¥–µ—Ñ–æ–ª—Ç: –Ω–∏—á—Ç–æ –∏–∑ –º–µ–Ω—é –Ω–µ –Ω–∞–∂–∞—Ç–æ
        await update.message.reply_text("‚è≥ –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")
        return

    # ---------- –§–æ–ª–±—ç–∫ ----------
    await update.message.reply_text("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞–ø–∏—à–∏ /start.")
