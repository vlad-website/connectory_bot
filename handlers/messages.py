import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes

from handlers.keyboards import kb_after_sub, kb_searching, kb_main_menu
from core.i18n import tr
from db.user_queries import (
    get_user, update_user_nickname, update_user_gender,
    update_user_theme, update_user_sub, update_user_state,
    increment_messages
)
from core.topics import TOPICS
from core.matchmaking import add_to_queue, remove_from_queue, active_search_tasks, is_in_chat
from core.chat_control import end_dialog
from handlers.admin import send_admin_stats
from config import ADMIN_IDS

logger = logging.getLogger(__name__)

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if update.message is None:
            logger.debug("Received update without message, ignoring.")
            return

        user_id = update.effective_user.id
        text = (update.message.text or "").strip()

        # --- –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å entity bot_command ---
        if text.startswith("/"):
            logger.debug("Ignoring command-like text in message_handler: %s", text)
            return
        entities = update.message.entities or []
        for e in entities:
            if getattr(e, "type", None) == "bot_command":
                logger.debug("Ignoring message with bot_command entity: %s", text)
                return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ë–î)
        user = await get_user(user_id)
        if not user:
            await update.message.reply_text("‚ö†Ô∏è –ù–∞–∂–º–∏—Ç–µ /start")
            return

        state = user.get("state")
        logger.debug("message_handler: user=%s state=%s text=%r lang=%s",
                     user_id, state, text, user.get("lang"))

        # --- –†–∞–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ STOP (–∫–∞–∫ –±—ã–ª–æ) ---
        stop_label = await tr(user, "btn_stop")
        if text == stop_label:
            await handle_stop_search(user_id, user, context)
            return

        # --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: nickname ---
        if state == "nickname":
            # –ü—Ä—è–º–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∏–∫ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ gender
            try:
                await update_user_nickname(user_id, text)
                await update_user_state(user_id, "gender")
            except Exception:
                logger.exception("Failed to save nickname for user %s", user_id)
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ /start")
                return

            # –û–±–Ω–æ–≤–∏–º user –∏–∑ –ë–î, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é lang –∏ –ø—Ä.
            user = await get_user(user_id)
            keyboard = ReplyKeyboardMarkup(
                [[await tr(user, "gender_male")],
                 [await tr(user, "gender_female")],
                 [await tr(user, "gender_any")]],
                resize_keyboard=True
            )
            await update.message.reply_text(await tr(user, "choose_gender"), reply_markup=keyboard)
            return

        # --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: gender ---
        if state == "gender":
            # –∑–∞—â–∏—Ç–∞: –µ—Å–ª–∏ –ø–æ–ª —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω –≤ –ë–î ‚Äî –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º–µ–Ω—é
            if user.get("gender"):
                logger.debug("User %s already has gender=%s ‚Äî –ø–µ—Ä–µ—Ö–æ–¥ –≤ menu", user_id, user.get("gender"))
                try:
                    await update_user_state(user_id, "menu")
                except Exception:
                    logger.exception("Failed to set state=menu for user %s", user_id)
                user = await get_user(user_id)
                await update.message.reply_text(await tr(user, "main_menu"), reply_markup=await kb_main_menu(user))
                return

            valid_genders = [await tr(user, "gender_male"),
                             await tr(user, "gender_female"),
                             await tr(user, "gender_any")]
            if text not in valid_genders:
                await update.message.reply_text(await tr(user, "wrong_gender"),
                                                reply_markup=ReplyKeyboardMarkup([[g] for g in valid_genders],
                                                                               resize_keyboard=True))
                return

            # –∑–∞–ø–∏—Å—å –ø–æ–ª–∞ ‚Äî –≤ try/except, –∑–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º user
            try:
                await update_user_gender(user_id, text)
                await update_user_state(user_id, "menu")
            except Exception:
                logger.exception("Failed to update gender for user %s", user_id)
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ /start")
                return

            user = await get_user(user_id)
            await update.message.reply_text(await tr(user, "main_menu"), reply_markup=await kb_main_menu(user))
            return


        # --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
        if state == "menu":
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –º–∞–ø–ø–∏–Ω–≥ –∫–Ω–æ–ø–æ–∫ (–ø–µ—Ä–µ–≤–æ–¥—ã –æ–¥–∏–Ω —Ä–∞–∑)
            start_btn = await tr(user, "btn_start_chat")
            stats_btn = await tr(user, "btn_stats")
            settings_btn = await tr(user, "btn_settings")
            suggest_btn = await tr(user, "btn_suggest")
            vip_btn = await tr(user, "btn_get_vip")
            donate_btn = await tr(user, "btn_donate")
        
            menu_actions = {
                start_btn: "theme",
                stats_btn: "stats",
                settings_btn: "settings",
                suggest_btn: "suggest",
                vip_btn: "vip",
                donate_btn: "donate",
            }
        
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥
            if text in menu_actions:
                action = menu_actions[text]
        
                if action == "theme":
                    try:
                        await update_user_state(user_id, "theme")
                    except Exception:
                        logger.exception("Failed to set state=theme for user %s", user_id)
                        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                        return
                    user = await get_user(user_id)  # —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
                    await update.message.reply_text(
                        await tr(user, "pick_theme"),
                        reply_markup=await get_topic_keyboard(user)
                    )
                    return
        
                elif action == "stats":
                    await update.message.reply_text(await tr(user, "stats_in_progress"))
                    return
        
                elif action == "settings":
                    await update.message.reply_text(await tr(user, "settings_in_progress"))
                    return
        
                elif action == "suggest":
                    try:
                        await update_user_state(user_id, "suggest")
                    except Exception:
                        logger.exception("Failed to set state=suggest for user %s", user_id)
                        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                        return
                    user = await get_user(user_id)
                    await update.message.reply_text(await tr(user, "pls_suggest"))
                    return
        
                elif action == "vip":
                    await update.message.reply_text(await tr(user, "vip_soon"))
                    return
        
                elif action == "donate":
                    await update.message.reply_text(await tr(user, "donate_thanks"))
                    return
        
            # –ê–¥–º–∏–Ω—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ñ–∏–∫—Å: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é)
            if text == "üìä –ê–¥–º–∏–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
                if user_id in ADMIN_IDS:
                    await send_admin_stats(update, context)
                else:
                    await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
                return
        
        
        # --- –¢–µ–º–∞ –∏ –ø–æ–¥—Ç–µ–º–∞ ---
        if state == "theme":
            # –∫–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
            if text == await tr(user, "btn_main_menu"):
                try:
                    await update_user_state(user_id, "menu")
                except Exception:
                    logger.exception("Failed to set state=menu for user %s", user_id)
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.")
                    return
                user = await get_user(user_id)
                from handlers.keyboards import kb_main_menu
                await update.message.reply_text(
                    await tr(user, "main_menu"),
                    reply_markup=await kb_main_menu(user)
                )
                return
        
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—É –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É
            theme_key = None
            for key in TOPICS:
                translated = await tr(user, key)
                if text == translated or text == key:
                    theme_key = key
                    break
        
            if not theme_key:
                await update.message.reply_text(await tr(user, "wrong_theme"))
                return
        
            try:
                await update_user_theme(user_id, theme_key)
                await update_user_state(user_id, "sub")
            except Exception:
                logger.exception("Failed to set theme/sub for user %s", user_id)
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–º—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ /start.")
                return
        
            # –û–±–Ω–æ–≤–∏–º user –∏ —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–µ–º
            user = await get_user(user_id)
            subtopics = TOPICS[theme_key] + ["any_sub"]
            subtopics_translated = [await tr(user, s) for s in subtopics]
            keyboard = [[s] for s in subtopics_translated]
            keyboard.append([await tr(user, "btn_main_menu")])
        
            await update.message.reply_text(
                await tr(user, "choose_sub"),
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
            return
        
        if state == "sub":
            if text == await tr(user, "btn_main_menu"):
                try:
                    await update_user_state(user_id, "menu")
                except Exception:
                    logger.exception("Failed to set state=menu for user %s", user_id)
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.")
                    return
                user = await get_user(user_id)
                await update.message.reply_text(await tr(user, "main_menu"), reply_markup=await kb_main_menu(user))
                return
        
            theme = user.get("theme")
            valid_sub_keys = TOPICS.get(theme, []) + ["any_sub"]
            valid_subs = [await tr(user, s) for s in valid_sub_keys]
            if text not in valid_subs:
                await update.message.reply_text(await tr(user, "wrong_sub"))
                return
        
            sub_key = valid_sub_keys[valid_subs.index(text)]
            try:
                await update_user_sub(user_id, sub_key)
                await update_user_state(user_id, "menu_after_sub")
            except Exception:
                logger.exception("Failed to set sub/menu_after_sub for user %s", user_id)
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–¥–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ /start.")
                return
        
            # –æ–±–Ω–æ–≤–∏–º user –ø–µ—Ä–µ–¥ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º confirm —Ç–µ–∫—Å—Ç–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            user = await get_user(user_id)
            await update.message.reply_text(
                f"{await tr(user, 'confirm_theme', theme=await tr(user, theme))}\n"
                f"{await tr(user, 'confirm_sub', sub=await tr(user, sub_key))}",
                reply_markup=await kb_after_sub(user)
            )
            return
        
        
        # --- –ú–µ–Ω—é –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ç–µ–º—ã ---
        if state == "menu_after_sub":
            if text == await tr(user, "btn_search"):
                try:
                    await update_user_state(user_id, "searching")
                except Exception:
                    logger.exception("Failed to set state=searching for user %s", user_id)
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                    return
        
                user = await get_user(user_id)  # —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è kb_searching –∏ –æ—á–µ—Ä–µ–¥–∏
                await update.message.reply_text(await tr(user, "searching"), reply_markup=await kb_searching(user))
        
                try:
                    await add_to_queue(user_id, user["theme"], user["sub"], context)
                except Exception:
                    logger.exception("add_to_queue failed for user %s", user_id)
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–∫–∞—Ç–∏—Ç—å –≤ –º–µ–Ω—é_after_sub
                    try:
                        await update_user_state(user_id, "menu_after_sub")
                    except Exception:
                        logger.exception("Failed to rollback state to menu_after_sub for user %s", user_id)
                    await update.message.reply_text(await tr(user, "search_failed"), reply_markup=await kb_after_sub(user))
                return
        
            elif text == await tr(user, "btn_change_sub"):
                try:
                    await update_user_state(user_id, "sub")
                except Exception:
                    logger.exception("Failed to set state=sub for user %s", user_id)
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                    return
                # –æ–±–Ω–æ–≤–∏–º user, —á—Ç–æ–±—ã –±—Ä–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ç–µ–º—É
                user = await get_user(user_id)
                subtopics = TOPICS[user["theme"]] + ["any_sub"]
                keyboard = [[await tr(user, s)] for s in subtopics]
                await update.message.reply_text(await tr(user, "choose_sub"), reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
                return
        
            elif text == await tr(user, "btn_main_menu"):
                try:
                    await update_user_state(user_id, "menu")
                except Exception:
                    logger.exception("Failed to set state=menu for user %s", user_id)
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.")
                    return
                user = await get_user(user_id)
                await update.message.reply_text(await tr(user, "main_menu"), reply_markup=await kb_main_menu(user))
                return
        
            elif text == await tr(user, "btn_support"):
                await update.message.reply_text(await tr(user, "support_thanks"), reply_markup=await kb_after_sub(user))
                return
        
        
        # --- –ü–æ–∏—Å–∫ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ ---
        if state == "searching":
            if text == await tr(user, "btn_change_sub"):
                try:
                    await remove_from_queue(user_id)
                except Exception:
                    logger.exception("Failed to remove_from_queue for user %s", user_id)
                try:
                    await update_user_state(user_id, "sub")
                except Exception:
                    logger.exception("Failed to set state=sub for user %s", user_id)
                user = await get_user(user_id)
                sub_keys = TOPICS[user["theme"]] + ["any_sub"]
                keyboard = [[await tr(user, s)] for s in sub_keys]
                await update.message.reply_text(await tr(user, "choose_sub"), reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
                return
        
            if text == await tr(user, "btn_main_menu"):
                try:
                    await remove_from_queue(user_id)
                except Exception:
                    logger.exception("Failed to remove_from_queue for user %s", user_id)
                try:
                    await update_user_state(user_id, "menu")
                except Exception:
                    logger.exception("Failed to set state=menu for user %s", user_id)
                user = await get_user(user_id)
                await update.message.reply_text(await tr(user, "search_stopped"), reply_markup=await kb_main_menu(user))
                return
        
            if text == await tr(user, "btn_support"):
                await update.message.reply_text(await tr(user, "support_thanks"), reply_markup=await kb_searching(user))
                return
        
            await update.message.reply_text(await tr(user, "default_searching"))
            return
        
        
        # --- –ß–∞—Ç ---
        if await is_in_chat(user_id):
            if text == await tr(user, "btn_end"):
                await end_dialog(user_id, context)
                return
            if text == await tr(user, "btn_new_partner"):
                await end_dialog(user_id, context, silent=True)
                try:
                    await update_user_state(user_id, "menu")
                except Exception:
                    logger.exception("Failed to set state=menu after new_partner for user %s", user_id)
                user = await get_user(user_id)
                await update.message.reply_text(await tr(user, "main_menu"), reply_markup=await kb_main_menu(user))
                return
            companion_id = user.get("companion_id")
            if companion_id:
                await context.bot.send_message(companion_id, text=text)
                await increment_messages(user_id)
                await increment_messages(companion_id)
            return
        
        
        # --- –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ---
        if state == "suggest":
            # –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –ø–µ—Ä–µ–≤–æ–¥—ã –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤—ã–∑—ã–≤–∞–µ–º tr –æ–¥–∏–Ω —Ä–∞–∑)
            btn_main = await tr(user, "btn_main_menu")
            btn_settings = await tr(user, "btn_settings")
            btn_start = await tr(user, "btn_start_chat")
            btn_stats = await tr(user, "btn_stats")
            btn_vip = await tr(user, "btn_get_vip")
            btn_donate = await tr(user, "btn_donate")
        
            cancel_buttons = {btn_main, btn_settings, btn_start, btn_stats, btn_vip, btn_donate}
        
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –æ–¥–Ω—É –∏–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ ‚Äî –æ—Ç–º–µ–Ω—è–µ–º —Ä–µ–∂–∏–º suggest
            if text in cancel_buttons:
                # –µ—Å–ª–∏ –Ω–∞–∂–∞–ª "–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ" ‚Äî —Å—Ä–∞–∑—É –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ state "theme"
                if text == btn_start:
                    try:
                        await update_user_state(user_id, "theme")
                    except Exception:
                        logger.exception("Failed to set state=theme from suggest for user %s", user_id)
                        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                        return
                    user = await get_user(user_id)
                    await update.message.reply_text(
                        await tr(user, "pick_theme"),
                        reply_markup=await get_topic_keyboard(user)
                    )
                    return
        
                # –≤–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                try:
                    await update_user_state(user_id, "menu")
                except Exception:
                    logger.exception("Failed to set state=menu from suggest for user %s", user_id)
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                    return
                user = await get_user(user_id)
                from handlers.keyboards import kb_main_menu
                await update.message.reply_text(
                    await tr(user, "main_menu"),
                    reply_markup=await kb_main_menu(user)
                )
                return
        
            # –Ω–µ –ø—Ä–∏—Å—ã–ª–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã
            if not text or text.startswith("/"):
                try:
                    await update_user_state(user_id, "menu")
                except Exception:
                    logger.exception("Failed to set state=menu when cancelling suggest for user %s", user_id)
                user = await get_user(user_id)
                from handlers.keyboards import kb_main_menu
                await update.message.reply_text(
                    await tr(user, "main_menu"),
                    reply_markup=await kb_main_menu(user)
                )
                return
        
            # –í—Å—ë –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            admin_id = ADMIN_IDS[0] if (ADMIN_IDS and len(ADMIN_IDS) > 0) else None
            if admin_id:
                try:
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=f"üì© –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç @{update.effective_user.username or user_id}:\n\n{text}"
                    )
                except Exception:
                    logger.exception("Failed to forward suggestion to admin")
        
            await update.message.reply_text(await tr(user, "suggest_thanks"))
            try:
                await update_user_state(user_id, "menu")
            except Exception:
                logger.exception("Failed to set state=menu after suggest for user %s", user_id)
            user = await get_user(user_id)
            from handlers.keyboards import kb_main_menu
            await update.message.reply_text(
                await tr(user, "main_menu"),
                reply_markup=await kb_main_menu(user)
            )
            return

        # --- –§–æ–ª–±—ç–∫ ---
        await update.message.reply_text(await tr(user, "error_fallback"))

    except Exception:
            logger.exception("Unhandled exception in message_handler")
            try:
                await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /start –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            except Exception:
                logger.exception("Also failed to notify user after handler exception")
