from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
import logging, traceback
from db.user_queries import (
    get_user, create_user, update_user_state
)

logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        logger.info("‚ñ∂Ô∏è /start for %s", user_id)

        user = await get_user(user_id)
        logger.debug("get_user returned: %s (%s)", user, type(user))

        if user:
            nickname = (user.get("nickname")            # <- –µ—Å–ª–∏ —ç—Ç–æ dict
                        if isinstance(user, dict) else
                        user["nickname"]) or "–¥—Ä—É–≥"
            await update.message.reply_text(
                f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {nickname}!",
                reply_markup=ReplyKeyboardMarkup([["–ù–∞—á–∞—Ç—å"]], resize_keyboard=True)
            )
        else:
            await create_user(user_id)
            await update_user_state(user_id, "nickname")
            await update.message.reply_text(
                "üëã –ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–∏–∫:"
            )

        logger.info("‚úÖ /start replied OK for %s", user_id)

    except Exception as e:
        # –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        print("üí• EXCEPTION in /start:", e, flush=True)
        print(traceback.format_exc(), flush=True)
        logger.exception("Exception in /start")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
