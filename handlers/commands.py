import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler
from db.user_queries import get_user, create_user, update_user_state, update_user_lang
from core.i18n import tr_lang

logger = logging.getLogger(__name__)

# ---------------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ ----------------
def kb_choose_lang() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
         InlineKeyboardButton("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data="lang_uk")],
        [InlineKeyboardButton("üá∫üá∏ English",  callback_data="lang_en"),
         InlineKeyboardButton("üá™üá∏ Espa√±ol",  callback_data="lang_es")],
        [InlineKeyboardButton("üá´üá∑ Fran√ßais", callback_data="lang_fr"),
         InlineKeyboardButton("üá©üá™ Deutsch",  callback_data="lang_de")],
    ])

# ---------------- /start ----------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = await get_user(user_id)

    # --- –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ---
    if user:
        await update_user_state(user_id, "menu")
        user = await get_user(user_id)
        await update.message.reply_text(
            await tr(user, "main_menu"),
            reply_markup=await kb_main_menu(user)
        )
        return

    # --- –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ —è–∑—ã–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω ---
    device_lang = (update.effective_user.language_code or "ru").split("-")[0]
    if device_lang not in ["ru", "uk", "en", "es", "fr", "de"]:
        device_lang = "ru"

    welcome_messages = {
        "ru": "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º. –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º ‚Äî –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫:",
        "uk": "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑–∞ —ñ–Ω—Ç–µ—Ä–µ—Å–∞–º–∏. –î–∞–≤–∞–π –ø–æ—á–Ω–µ–º–æ ‚Äî –æ–±–µ—Ä–∏ –º–æ–≤—É:",
        "en": "üëã Hi! I'm a bot for chatting by interests. Let's start ‚Äî choose a language:",
        "es": "üëã ¬°Hola! Soy un bot para chatear seg√∫n intereses. Empecemos ‚Äî elige un idioma:",
        "de": "üëã Hallo! Ich bin ein Bot f√ºr Interessens-Chats. Lass uns anfangen ‚Äì w√§hle eine Sprache:",
        "fr": "üëã Salut ! Je suis un bot pour discuter selon tes centres d'int√©r√™t. Commen√ßons ‚Äî choisis une langue :"
    }

    await update.message.reply_text(
        welcome_messages.get(device_lang, welcome_messages["ru"]),
        reply_markup=kb_choose_lang()
    )
    return

# ---------- callback: –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ ----------
async def choose_lang(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç —É–≤–∏–¥–∏—Ç "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
    try:
        await query.answer()
    except Exception:
        # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        logger.exception("Failed to answer callback_query")

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ —è–∑—ã–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ
    try:
        lang = query.data.split("_", 1)[1]
    except Exception:
        logger.error("Bad callback data: %s", query.data)
        try:
            await query.answer(text="–ù–µ–≤–µ—Ä–Ω–∞—è –∫–Ω–æ–ø–∫–∞", show_alert=True)
        except Exception:
            pass
        return

    user_id = query.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º state ‚Äî –≤ try/except —á—Ç–æ–±—ã –ª–æ–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ë–î
    try:
        await create_user(user_id, lang)
        await update_user_lang(user_id, lang)
        await update_user_state(user_id, "nickname")
    except Exception:
        logger.exception("Failed to create/update user for choose_lang (user=%s, lang=%s)", user_id, lang)
        # —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–æ–±–ª–µ–º–µ (–ø–æ–ø—ã—Ç–∫–∞ edit, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–∫–∞)
        try:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –ø–æ–∑–∂–µ.")
        except Exception:
            try:
                await context.bot.send_message(chat_id=user_id, text="‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –ø–æ–∑–∂–µ.")
            except Exception:
                logger.exception("Also failed to notify user %s about DB error", user_id)
        return

    # –£—Å–ø–µ—à–Ω–æ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–≤–æ–¥–µ –Ω–∏–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º edit + fallback)
    try:
        await query.edit_message_text(tr_lang(lang, "enter_nick"))
    except Exception:
        # –µ—Å–ª–∏ edit –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –≤ –¥—Ä—É–≥–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ) ‚Äî —à–ª—ë–º –Ω–æ–≤–æ–µ
        try:
            await context.bot.send_message(chat_id=user_id, text=tr_lang(lang, "enter_nick"))
        except Exception:
            logger.exception("Failed to send enter_nick message to user %s", user_id)

# ---------- —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ----------
def register_handlers(app):
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(choose_lang, pattern=r"^lang_"))
